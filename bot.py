from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

NAME, AGE, EDUCATION, JOB, HOBBY, OFFER, PHONE = range(7)
user_data = {}

def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "üëã–ü—Ä–∏–≤—ñ—Ç! –ú–∏ –¥—É–∂–µ —Ä–∞–¥—ñ, —â–æ –≤–∏ –∑–∞–≤—ñ—Ç–∞–ª–∏!
"
        "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –∫–∞–≤—É, –¥–∞–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å, —â–æ–± –∫—Ä–∞—â–µ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è üòä"
    )
    update.message.reply_text("1Ô∏è‚É£ –Ø–∫ —è –º–æ–∂—É –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?")
    return NAME

def name(update: Update, context: CallbackContext) -> int:
    user_data["name"] = update.message.text
    update.message.reply_text("2Ô∏è‚É£ –°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")
    return AGE

def age(update: Update, context: CallbackContext) -> int:
    user_data["age"] = update.message.text
    update.message.reply_text("3Ô∏è‚É£ –Ø–∫–∞ –≤–∞—à–∞ –æ—Å–≤—ñ—Ç–∞/–ø—Ä–æ—Ñ–µ—Å—ñ—è?")
    return EDUCATION

def education(update: Update, context: CallbackContext) -> int:
    user_data["education"] = update.message.text
    update.message.reply_text("4Ô∏è‚É£ –ö–∏–º –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ —á–∏ –Ω–∞–≤—á–∞—î—Ç–µ—Å—å?")
    return JOB

def job(update: Update, context: CallbackContext) -> int:
    user_data["job"] = update.message.text
    keyboard = [['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']]
    update.message.reply_text("5Ô∏è‚É£ –ß–∏ –º–∞—î—Ç–µ –≤–∏ —Ö–æ–±—ñ? –Ø–∫—â–æ —Ç–∞–∫, —Ç–æ —è–∫—ñ?", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return HOBBY

def hobby(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        user_data["hobby"] = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    else:
        user_data["hobby"] = text
    keyboard = [["–¢–∞–∫", "–ù—ñ"]]
    update.message.reply_text("6Ô∏è‚É£ –ß–∏ —Ö–æ—á–µ—Ç–µ –≤–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ —Ä–æ–±–æ—Ç—ñ, –æ—Å–≤—ñ—Ç—ñ —á–∏ —Å—Ç–∞–∂—É–≤–∞–Ω–Ω—è–º?",
                              reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return OFFER

def offer(update: Update, context: CallbackContext) -> int:
    user_data["offer"] = update.message.text
    contact_btn = KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    keyboard = [[contact_btn]]
    update.message.reply_text(
        "7Ô∏è‚É£ –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ —ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—ó –∫–∞–≤–∏ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.
"
        "–û–±—ñ—Ü—è—î–º–æ, —â–æ –Ω–µ –±—É–¥–µ–º–æ –Ω–∞–±—Ä–∏–¥–∞—Ç–∏ üòä",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return PHONE

def phone(update: Update, context: CallbackContext) -> int:
    if not update.message.contact:
        update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—É.")
        return PHONE
    user_data["phone"] = update.message.contact.phone_number
    update.message.reply_text(
        "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!
"
        "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ—é –∫–∞–≤—É, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –±–∞—Ä—ñ—Å—Ç–∏ —ñ –ø–æ–∫–∞–∂—ñ—Ç—å —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
"
        "–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üò∫"
    )
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–î—è–∫—É—î–º–æ! –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start üòä")
    return ConversationHandler.END

def main():
    import os
    TOKEN = os.environ.get("BOT_TOKEN")
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
            AGE: [MessageHandler(Filters.text & ~Filters.command, age)],
            EDUCATION: [MessageHandler(Filters.text & ~Filters.command, education)],
            JOB: [MessageHandler(Filters.text & ~Filters.command, job)],
            HOBBY: [MessageHandler(Filters.text & ~Filters.command, hobby)],
            OFFER: [MessageHandler(Filters.text & ~Filters.command, offer)],
            PHONE: [MessageHandler(Filters.contact, phone),
                    MessageHandler(Filters.text & ~Filters.command, phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
